#include "IRRemoteControl.h"
#include <Keypad.h>
IRSend irSend;
String command;
const PROGMEM unsigned int volumeUp [] = {2392, 636, 556, 640, 1156, 636, 556, 640, 560, 636, 1152, 640, 556, 596, 600, 640, 1152, 640, 556, 636, 556, 640, 556, 640, 556, 26332, 2392, 640, 556, 640, 1152, 640, 556, 640, 552, 640, 1156, 640, 552, 640, 556, 640, 1152, 640, 556, 640, 556, 636, 556, 640, 556, 26328, 2392, 640, 556, 640, 1152, 596, 596, 640, 556, 640, 1152, 640, 556, 640, 552, 640, 1156, 636, 556, 640, 556, 640, 552, 640, 556, 26328, 2392, 640, 556, 640, 1152, 640, 556, 640, 552, 640, 1152, 640, 556, 640, 556, 640, 1152, 636, 556, 600, 596, 640, 556, 640, 556};
const PROGMEM unsigned int volumeDown [] = {2392, 640, 1152, 640, 1156, 596, 596, 600, 596, 640, 1152, 640, 556, 640, 556, 640, 1156, 636, 556, 640, 556, 640, 556, 640, 556, 25740, 2392, 640, 1152, 640, 1156, 636, 556, 640, 556, 640, 1152, 640, 556, 640, 556, 640, 1152, 636, 560, 636, 556, 640, 556, 640, 556, 25736, 2396, 640, 1152, 640, 1152, 600, 596, 640, 556, 640, 1156, 636, 556, 640, 556, 640, 1156, 636, 556, 640, 556, 640, 556, 636, 556, 25744, 2396, 640, 1152, 636, 1156, 640, 556, 640, 556, 640, 1152, 640, 556, 640, 556, 640, 1152, 600, 600, 636, 556, 640, 556, 640, 556, 25740, 2396, 600, 1244, 588, 1152, 640, 612, 584, 612, 584, 1156, 636, 612, 584, 556, 640, 1208, 584, 612, 584, 612, 584, 612, 584, 556};
const PROGMEM unsigned int television [] = {420, 33696, 416, 33692, 420, 33680, 416, 280, 156, 33156, 2392, 636, 1156, 636, 556, 640, 1152, 640, 556, 640, 1152, 640, 556, 640, 552, 640, 1156, 636, 556, 640, 556, 640, 556, 640, 556, 25732, 2392, 640, 1156, 636, 556, 640, 1152, 636, 556, 644, 1152, 640, 556, 636, 556, 640, 1156, 636, 556, 640, 556, 640, 556, 636, 556, 25728, 2448, 584, 1208, 584, 608, 584, 1208, 584, 608, 588, 1208, 584, 608, 588, 608, 584, 1208, 584, 608, 588, 556, 636, 612, 584, 612, 25672, 2444, 588, 1152, 640, 556, 636, 1156, 636, 556, 640, 1152, 636, 560, 636, 560, 636, 1156, 636, 556, 640, 556, 640, 556, 636, 556};
const PROGMEM unsigned int fibe[] = {424, 292, 136, 308, 136, 648, 136, 476, 140, 472, 136, 312, 136, 308, 140, 308, 136, 312, 136, 644, 136, 644, 136, 476, 136, 644, 136, 312, 136, 308, 136, 812, 136, 312, 136, 23772, 420, 276, 156, 33248, 420, 276, 156, 3640, 152, 29440, 420, 280, 156, 33132, 2396, 608, 1184, 612, 584, 608, 1184, 608, 588, 608, 1184, 608, 588, 608, 584, 612, 1180, 612, 584, 612, 584, 612, 584, 608, 588};
const PROGMEM unsigned int one [] = {420, 4116, 88, 29516, 420, 33720, 420, 280, 152, 33276, 420, 33704, 424, 292, 136, 312, 136, 644, 140, 472, 136, 480, 136, 308, 140, 308, 136, 312, 136, 308, 136, 308, 140, 644, 136, 476, 136, 644, 140, 308, 136, 308, 136, 312, 136, 476, 136, 24444, 424, 292, 136, 308, 140, 640, 140, 476, 136, 476, 140, 304, 140, 308, 140, 308, 136, 308, 140, 308, 140, 636, 216, 400, 140, 640, 140, 308, 140, 308, 136, 308, 136, 476, 140};
const PROGMEM unsigned int two [] = {400, 320, 92, 356, 92, 688, 92, 524, 92, 520, 92, 356, 92, 352, 92, 356, 92, 352, 92, 356, 92, 688, 92, 524, 92, 688, 92, 356, 92, 356, 88, 356, 92, 688, 92, 24376, 400, 320, 92, 356, 92, 688, 92, 520, 92, 524, 92, 352, 92, 356, 92, 356, 88, 356, 92, 356, 92, 688, 92, 524, 88, 692, 92, 352, 96, 352, 92, 356, 92, 688, 92, 24364, 404, 320, 92, 352, 92, 692, 88, 524, 92, 520, 92, 356, 92, 356, 92, 352, 92, 356, 92, 352, 92, 692, 92, 520, 92, 688, 92, 356, 92, 356, 92, 352, 92, 692, 92};
const PROGMEM unsigned int three [] = {424, 296, 132, 312, 136, 648, 132, 480, 132, 480, 132, 316, 132, 312, 136, 312, 132, 312, 136, 312, 136, 644, 132, 480, 136, 648, 132, 312, 132, 312, 136, 312, 132, 816, 136, 24112, 424, 272, 164, 304, 132, 648, 132, 484, 132, 480, 132, 316, 132, 312, 132, 316, 132, 312, 136, 312, 132, 648, 132, 480, 136, 644, 136, 312, 132, 312, 136, 312, 136, 812, 132, 24108, 424, 276, 160, 308, 128, 652, 136, 476, 136, 480, 132, 312, 136, 312, 132, 312, 136, 312, 136, 308, 136, 648, 132, 480, 132, 648, 136, 312, 132, 312, 136, 312, 132, 816, 132};
const PROGMEM unsigned int four [] = {424, 296, 128, 320, 132, 644, 136, 480, 132, 480, 136, 312, 132, 312, 136, 316, 128, 316, 132, 648, 132, 648, 128, 484, 136, 644, 132, 316, 136, 312, 132, 480, 132, 316, 132, 24124, 420, 276, 164, 304, 136, 644, 128, 484, 136, 480, 132, 316, 132, 312, 132, 316, 128, 316, 132, 648, 136, 644, 136, 480, 132, 648, 132, 312, 136, 312, 132, 480, 136, 312, 132, 24120, 424, 296, 132, 312, 136, 648, 132, 480, 136, 480, 132, 312, 136, 312, 132, 312, 132, 316, 136, 644, 132, 648, 136, 480, 132, 648, 136, 308, 136, 312, 136, 480, 132, 312, 136};
const PROGMEM unsigned int five [] = {428, 292, 136, 308, 136, 644, 136, 480, 136, 476, 136, 308, 140, 308, 136, 312, 132, 312, 136, 644, 136, 652, 132, 476, 132, 648, 136, 308, 140, 308, 136, 476, 136, 480, 136, 23936, 424, 292, 136, 308, 140, 644, 136, 476, 136, 480, 136, 308, 136, 312, 136, 308, 136, 308, 136, 648, 136, 644, 136, 476, 136, 644, 136, 312, 136, 312, 132, 480, 136, 476, 140, 23928, 424, 292, 136, 312, 136, 644, 136, 476, 136, 480, 132, 312, 136, 312, 136, 308, 136, 312, 136, 644, 136, 644, 136, 476, 140, 640, 140, 308, 136, 308, 140, 476, 136, 476, 136};
const PROGMEM unsigned int six [] = {428, 292, 136, 308, 140, 640, 140, 472, 140, 476, 136, 308, 140, 308, 140, 308, 136, 308, 140, 308, 136, 644, 136, 476, 140, 640, 140, 308, 140, 304, 140, 476, 136, 644, 140, 24128, 408, 288, 140, 308, 136, 644, 140, 472, 140, 476, 140, 304, 140, 308, 136, 308, 140, 308, 140, 304, 140, 644, 136, 476, 140, 640, 140, 308, 136, 308, 140, 476, 136, 644, 140, 24096, 428, 288, 140, 308, 140, 644, 132, 476, 140, 476, 136, 308, 140, 308, 136, 308, 140, 308, 136, 308, 140, 640, 140, 476, 136, 644, 136, 308, 140, 308, 140, 472, 140, 640, 140};
const PROGMEM unsigned int seven [] = {424, 296, 136, 312, 136, 644, 136, 476, 136, 480, 132, 312, 136, 312, 136, 308, 136, 312, 136, 644, 136, 644, 136, 480, 136, 644, 136, 312, 136, 308, 136, 480, 132, 812, 136, 23616, 424, 292, 136, 312, 136, 644, 136, 480, 132, 480, 136, 308, 136, 312, 136, 308, 136, 312, 136, 644, 136, 644, 136, 480, 136, 644, 136, 312, 136, 308, 136, 480, 136, 812, 136, 23608, 424, 292, 136, 312, 136, 644, 136, 476, 136, 480, 136, 308, 140, 308, 136, 308, 136, 312, 136, 644, 136, 644, 136, 480, 136, 644, 136, 308, 136, 312, 136, 476, 136, 812, 136, 23620, 424, 296, 132, 312, 136, 648, 136, 476, 136, 476, 136, 312, 136, 308, 140, 308, 136, 308, 136, 648, 136, 644, 136, 476, 140, 644, 136, 308, 136, 312, 136, 476, 136, 812, 136};
const PROGMEM unsigned int eight [] = {428, 292, 136, 308, 136, 644, 140, 472, 140, 476, 136, 308, 140, 308, 136, 308, 140, 308, 136, 644, 140, 640, 140, 476, 136, 644, 136, 308, 140, 308, 140, 640, 140, 308, 136, 23948, 424, 292, 136, 308, 140, 640, 140, 476, 136, 476, 140, 308, 140, 304, 140, 308, 136, 308, 140, 644, 136, 644, 136, 476, 140, 640, 140, 308, 136, 308, 140, 644, 136, 308, 140, 23940, 428, 288, 140, 308, 136, 644, 136, 476, 140, 472, 140, 308, 140, 308, 136, 308, 140, 308, 136, 644, 136, 644, 140, 472, 140, 644, 136, 308, 140, 308, 136, 644, 136, 308, 140, 23932, 428, 288, 140, 308, 140, 640, 140, 472, 140, 476, 136, 308, 140, 308, 136, 308, 140, 308, 136, 644, 140, 640, 140, 476, 136, 644, 136, 308, 140, 308, 136, 644, 140, 308, 136};
const PROGMEM unsigned int nine [] = {424, 292, 136, 308, 136, 648, 136, 476, 136, 476, 136, 312, 136, 308, 136, 312, 136, 308, 144, 304, 136, 644, 136, 476, 136, 648, 136, 308, 136, 312, 136, 644, 136, 480, 132, 24128, 424, 292, 136, 312, 136, 644, 136, 476, 140, 476, 136, 312, 132, 312, 136, 312, 136, 308, 136, 312, 136, 644, 136, 476, 140, 644, 136, 308, 140, 308, 136, 644, 136, 476, 136, 24136, 424, 292, 136, 312, 136, 644, 136, 476, 136, 480, 136, 308, 136, 312, 136, 308, 140, 308, 136, 308, 140, 644, 136, 476, 136, 648, 136, 308, 136, 312, 136, 644, 136, 476, 136, 24136, 420, 296, 136, 312, 136, 644, 136, 476, 140, 476, 132, 312, 136, 312, 136, 308, 136, 312, 136, 308, 136, 648, 132, 480, 136, 648, 132, 312, 136, 312, 132, 648, 136, 476, 136};
const PROGMEM unsigned int zero [] = {424, 292, 136, 308, 140, 640, 140, 476, 136, 476, 136, 312, 136, 308, 140, 308, 136, 308, 140, 644, 136, 644, 136, 476, 140, 644, 136, 308, 140, 308, 136, 308, 140, 308, 136, 24288, 424, 292, 136, 312, 136, 644, 136, 476, 140, 476, 136, 308, 136, 312, 136, 308, 136, 312, 136, 644, 136, 644, 140, 476, 136, 644, 136, 308, 140, 308, 136, 308, 140, 308, 136, 24272, 428, 292, 136, 308, 136, 644, 136, 480, 136, 476, 136, 308, 140, 308, 136, 312, 136, 308, 136, 644, 140, 640, 140, 476, 136, 644, 136, 308, 140, 308, 136, 308, 140, 308, 136, 24276, 424, 292, 136, 308, 140, 644, 136, 476, 136, 476, 140, 308, 136, 308, 140, 308, 136, 308, 140, 644, 136, 644, 136, 476, 136, 644, 136, 312, 136, 308, 136, 312, 136, 312, 136};
const PROGMEM unsigned int mute [] = {2400, 608, 588, 608, 588, 608, 1184, 608, 588, 608, 1184, 608, 588, 608, 588, 608, 1184, 608, 588, 608, 584, 612, 584, 612, 584, 26336, 2400, 608, 584, 612, 584, 612, 1184, 608, 584, 612, 1184, 608, 588, 608, 584, 608, 1184, 612, 584, 612, 584, 608, 588, 608, 588, 26328, 2400, 608, 584, 612, 584, 608, 1184, 608, 588, 608, 1184, 608, 584, 612, 584, 612, 1180, 612, 584, 612, 584, 608, 588, 608, 584, 26328, 2396, 612, 584, 612, 584, 612, 1180, 612, 584, 608, 1184, 612, 584, 608, 584, 612, 1180, 612, 584, 612, 584, 608, 588, 608, 584, 26328, 2396, 612, 584, 612, 584, 608, 1184, 608, 588, 608, 1184, 608, 588, 608, 584, 612, 1180, 612, 584, 612, 584, 608, 584, 612, 584};
const PROGMEM unsigned int lastChannel [] = {416, 280, 152, 33264, 424, 34988, 416, 280, 156, 33264, 420, 768, 92, 3232, 124, 768, 124, 2496, 128, 1884, 124, 23960, 420, 296, 136, 308, 136, 644, 136, 480, 136, 476, 136, 312, 132, 312, 136, 312, 132, 312, 136, 312, 136, 644, 136, 476, 136, 644, 136, 312, 136, 312, 136, 644, 136, 644, 136, 23920, 424, 292, 136, 312, 136, 644, 136, 476, 136, 476, 136, 312, 136, 308, 136, 312, 136, 308, 136, 312, 136, 644, 136, 476, 136, 644, 136, 312, 136, 308, 136, 644, 136, 648, 136};
const PROGMEM unsigned int chose [] = {424, 296, 128, 316, 132, 648, 128, 488, 128, 484, 132, 316, 124, 320, 128, 320, 128, 316, 132, 312, 132, 652, 132, 480, 132, 652, 128, 484, 132, 480, 132, 816, 132, 316, 132, 23792, 428, 288, 140, 308, 136, 644, 136, 480, 136, 476, 136, 312, 136, 308, 136, 312, 136, 308, 136, 312, 136, 644, 136, 480, 136, 644, 136, 476, 140, 476, 136, 812, 136, 312, 136, 23780, 420, 296, 136, 312, 136, 644, 136, 476, 136, 480, 132, 312, 136, 312, 132, 312, 136, 312, 132, 312, 136, 648, 132, 480, 136, 644, 136, 476, 136, 480, 136, 812, 136, 308, 136, 23780, 420, 280, 156};
const PROGMEM unsigned int right [] = {420, 276, 168, 300, 132, 648, 132, 480, 136, 476, 140, 308, 136, 312, 132, 312, 136, 312, 132, 648, 136, 644, 136, 476, 136, 644, 136, 480, 136, 476, 136, 644, 136, 816, 136, 23096, 420, 296, 136, 308, 136, 644, 136, 480, 132, 480, 136, 312, 136, 308, 136, 312, 132, 312, 136, 648, 132, 648, 136, 476, 136, 644, 136, 476, 136, 480, 136, 644, 132, 816, 136, 23084, 424, 296, 136, 308, 136, 644, 136, 480, 132, 480, 136, 308, 136, 312, 136, 308, 136, 312, 136, 644, 136, 652, 128, 476, 136, 648, 132, 480, 136, 476, 136, 648, 136, 808, 136};
const PROGMEM unsigned int down [] = {2392, 612, 1176, 612, 580, 612, 1180, 612, 580, 612, 1176, 612, 1180, 608, 1180, 612, 1176, 612, 580, 612, 584, 608, 584, 612, 580, 24512, 2376, 608, 1180, 612, 580, 612, 1176, 612, 584, 608, 1180, 612, 1176, 612, 1180, 608, 1180, 608, 584, 608, 588, 608, 580, 612, 584, 24508, 2392, 608, 1180, 612, 584, 608, 1180, 608, 584, 608, 1184, 608, 1180, 608, 1184, 604, 1184, 608, 584, 608, 584, 608, 584, 608, 588, 24492, 2392, 608, 1180, 608, 584, 612, 1180, 608, 584, 608, 1180, 612, 1176, 612, 1180, 608, 1180, 612, 580, 612, 580, 612, 584, 608, 584};
const PROGMEM unsigned int up [] = {2396, 608, 584, 608, 584, 608, 1180, 612, 584, 608, 1180, 608, 1180, 612, 1180, 608, 1180, 608, 584, 608, 584, 612, 580, 612, 584, 25112, 2376, 608, 584, 612, 584, 608, 1180, 608, 584, 608, 1180, 612, 1180, 608, 1180, 608, 1180, 612, 584, 608, 584, 608, 584, 608, 584, 25116, 2376, 608, 588, 604, 584, 612, 1180, 608, 584, 608, 1180, 608, 1180, 612, 1180, 608, 1180, 608, 584, 612, 584, 608, 584, 608, 584, 25096, 2396, 608, 584, 608, 584, 608, 1180, 612, 580, 612, 1180, 608, 1180, 608, 1180, 612, 1180, 608, 584, 608, 584, 608, 588, 608, 584};
const PROGMEM unsigned int input [] = {2388, 596, 1192, 640, 552, 640, 1152, 596, 596, 636, 556, 640, 1152, 636, 556, 636, 1152, 640, 552, 640, 552, 596, 600, 636, 556, 25704, 2392, 636, 1152, 636, 556, 640, 1152, 636, 556, 636, 556, 636, 1156, 636, 556, 636, 1152, 616, 576, 616, 576, 616, 580, 612, 580, 25692, 2388, 612, 1180, 608, 584, 608, 1180, 592, 600, 612, 584, 608, 1180, 608, 584, 612, 1176, 612, 584, 608, 584, 608, 584, 612, 580, 25704, 2392, 608, 1180, 608, 584, 612, 1180, 608, 584, 608, 584, 612, 1180, 608, 584, 608, 1180, 612, 580, 612, 584, 608, 584, 608, 584, 25688, 2388, 612, 1180, 608, 584, 612, 1176, 612, 580, 612, 580, 616, 1176, 612, 580, 616, 1172, 616, 576, 616, 580, 636, 556, 636, 556};
const PROGMEM unsigned int inputselect [] = {2388, 636, 1156, 632, 560, 636, 1152, 636, 556, 636, 556, 636, 1156, 636, 1152, 636, 1156, 632, 556, 640, 556, 636, 556, 636, 556, 25100, 2392, 636, 1152, 636, 556, 636, 1156, 612, 580, 636, 556, 612, 1176, 636, 1152, 616, 1172, 616, 580, 636, 556, 636, 556, 616, 580, 25120, 2368, 636, 1152, 636, 556, 640, 1152, 636, 556, 636, 556, 636, 1152, 636, 1156, 636, 1152, 636, 556, 636, 556, 640, 552, 640, 556, 25100, 2388, 636, 1152, 640, 552, 640, 1152, 636, 556, 640, 552, 636, 1152, 640, 1152, 636, 1152, 596, 596, 640, 556, 636, 556, 636, 556, 25100, 2388, 640, 1152, 592, 600, 636, 1152, 640, 552, 640, 552, 640, 1152, 640, 1148, 640, 1148, 640, 556, 636, 556, 636, 556, 640, 552, 25100, 2392, 636, 1152, 596, 596, 640, 1152, 636, 556, 636, 556, 640, 1148, 640, 1152, 636, 1152, 636, 556, 640, 552, 596, 600, 596, 596, 25100, 2388, 596, 1196, 636, 556, 636, 1152, 640, 552, 640, 556, 636, 1152, 636, 1152, 636, 1152, 640, 632, 560, 556, 636, 636, 560, 552};
unsigned int temp [150];
const int FREQ_KHZ = 38;
const byte ROWS = 4;
const byte COLS = 4;

char hexaKeys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {12, 11, 10, 9};
byte colPins[COLS] = {8, 7, 6, 5};
Keypad keypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);
char channelarray [13][4] = {{'1', '4', '0', '0'}, {'1', '4', '0', '1'}, {'1', '4', '0', '2'}, {'1', '4', '0', '3'}, {'1', '4', '0', '4'}, {'1', '4', '0', '5'}, {'1', '4', '0', '6'}, {'1', '4', '0', '7'}, {'1', '4', '0', '8'}
  , {'1', '5', '0', '0'}, {'1', '5', '0', '1'}, {'1', '5', '0', '2'}, {'1', '2', '0', '5'}
};
String channels [13] = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve"};
int k = 0;
void setup()
{
  Serial.begin(9600);
  pinMode(4, OUTPUT );
  digitalWrite(4, LOW);
}

void loop() {
  char key = keypad.getKey();
  int  newchannel = 36;
  if (key == 'A') {
    Serial.println("What channel would you like to change?");
    k = 1;
  } else if (key == 'B') {
    k = 0;
    Serial.println("Okay, ending the process");
  }
  if (k == 1  ) {
    if ( key != '\0' && key != 'B' && key != 'A') {
      char old [4];
      for (int i = 0; i < 4; i++) {
        key = '\0';
        while (key == '\0') {
          key = keypad.getKey();
        }
        if (key != 'A' && key != 'B') {
          old[i] = key;
          Serial.println(key);
        } else if (key == 'A') {
          k = 1;
          i = 90;
        } else if (key == 'B') {
          k = 0;
          i = 78;
        }
      }
      int j = 0;
      for (int i = 0; i < 13; i++) {
        j = 0;
        for (int k = 0; k < 4; k++) {
          if (old[k] == channelarray[i][k]) {
            j++;
            if (j == 4) {
              newchannel = i;
            }
          }
        }
        if (newchannel == i) {
          newchannel = newchannel;
          i = 17;
        }
      }
      if (j != 4 && key == 'A') {
        Serial.println("What channel would you like to change?");
      } else if (j != 4 && key == 'B') {
        Serial.println("Ending process!");
      } else  if (j != 4) {
        Serial.println("This is not a channel currently on the VAR");
      } else {
        Serial.println("What channel would you like to replace this one with?");
        j = 0;
        char replacement [4];
        for (int i = 0; i < 4; i++) {
          key = '\0';
          while (key == '\0') {
            key = keypad.getKey();
          }
          if (key != 'A' && key != 'B') {
            replacement[i] = key;
            Serial.println(replacement[i]);
          } else if (key == 'A') {
            k = 1;
            i = 90;
          } else if (key == 'B') {
            k = 0;
            i = 78;
          }
        }
        int m = 0;
        for (int i = 0; i < 13; i++) {
          for (int j = 0; j < 4; j++) {
            if (replacement[k] == channelarray[i][k]) {
              m++;
            }
          }
        }
        if (m == 4 && key == 'A') {
          Serial.println("What channel would you like to change?");
        } else if (m >= 0 && key == 'B') {
          Serial.println("Ending process!");
          k = 0;
        } else if (m == 4) {
          Serial.println("You already have this channel on the VAR");
        } else {
          for (int j = 0; j < 4; j++) {
            channelarray[newchannel][j] = replacement[j];
          }
          Serial.println("Channel added!");
        }
      }
    }
  }
  if (Serial.available() > 0)
  {
    command = Serial.readString();
    Serial.println(command);
    if (command == "volume up") {
      int rand = random(1, 15);
      storage(volumeUp);
      for (int i = 0; i < rand; i++) {
        irSend.sendRaw(temp, 104, FREQ_KHZ, false);
        delay(50);
      }
    } else if (command == "volume down") {
      int rando = random(1, 15);
      storage(volumeDown);
      for (int i = 0; i < rando; i++) {
        irSend.sendRaw(temp, 104, FREQ_KHZ, false);
        delay(50);
      }
    } else if (command == "on"||command =="off") {
      storage(television);
      irSend.sendRaw(temp, 104, FREQ_KHZ, false);
      delay(200);
      storage(fibe);
      irSend.sendRaw(temp, 104, FREQ_KHZ, false);
      delay(200);
    }
    else if (command == "select") {
      storage(fibe);
      irSend.sendRaw(temp, 104, FREQ_KHZ, false);
      delay(200);
    }
    for (int i = 0; i < 13; i++) {
      if (command.equals(channels[i])) {
        for (int j = 0; j < 4; j++) {
          chardecoder(channelarray[i][j]);
          Serial.println(channelarray[i][j]);
        }
      }
    }
    if (command == "volume") {
      storage(mute);
      irSend.sendRaw(temp , 150, FREQ_KHZ, false);
    } else if (command == "go back") {
      storage(lastChannel);
      irSend.sendRaw(temp, 150, FREQ_KHZ, false);
      delay(1000);
      storage(chose);
      irSend.sendRaw(temp, 150, FREQ_KHZ, false);
    } else if (command == "go back twice") {
      storage(lastChannel);
      irSend.sendRaw(temp, 150, FREQ_KHZ, false);
      delay(1000);
      dpad(right);
      storage(chose);
      irSend.sendRaw(temp, 150, FREQ_KHZ, false);
    } else if (command == "go back three") {
      storage(lastChannel);
      irSend.sendRaw(temp, 150, FREQ_KHZ, false);
      delay(1000);
      dpad(right);
      dpad(right);
      storage(chose);
      irSend.sendRaw(temp, 150, FREQ_KHZ, false);
    } else if (command == "go back four") {
      storage(lastChannel);
      irSend.sendRaw(temp, 150, FREQ_KHZ, false);
      delay(1000);
      dpad(right);
      dpad(right);
      dpad(right);
      storage(chose);
      irSend.sendRaw(temp, 150, FREQ_KHZ, false);
    } else if (command == "go back five") {
      storage(lastChannel);
      irSend.sendRaw(temp, 150, FREQ_KHZ, false);
      delay(1000);
      dpad(right);
      dpad(right);
      dpad(right);
      dpad(right);
      storage(chose);
      irSend.sendRaw(temp, 150, FREQ_KHZ, false);
    } else if (command == "in up") {
      storage(input);
      irSend.sendRaw(temp, 150, FREQ_KHZ, false);
      dpad(up);
      storage(inputselect);
      irSend.sendRaw(temp, 150, FREQ_KHZ, false);
    } else if (command == "in down") {
      storage(input);
      irSend.sendRaw(temp, 150, FREQ_KHZ, false);
      dpad(down);
      storage(inputselect);
      irSend.sendRaw(temp, 150, FREQ_KHZ, false);
    } else if (command == "n") {
      //      channel(one, three, one, one);
    }
    Serial.flush();
  }
}
void storage(const unsigned int num[] ) {
  for (byte k = 0; k < 150; k++) {
    temp[k] = pgm_read_word_near(num + k);
  }
}
void channel(const unsigned int n[]) {
  storage(n);
  irSend.sendRaw(temp, 150, FREQ_KHZ, false);
  delay(200);
}
void dpad(int numero[]) {
  storage(numero);
  irSend.sendRaw(temp, 150, FREQ_KHZ, false);
  delay(1000);
}
void chardecoder(char i) {
  if (i == '1') {
    channel(one);
  } else if (i == '2') {
    channel(two);
  } else if (i == '3') {
    channel(three);
  } else if (i == '4') {
    channel(four);
  } else if (i == '5') {
    channel(five);
  } else if (i == '6') {
    channel(six);
  } else if (i == '7') {
    channel(seven);
  } else if (i == '8') {
    channel(eight);
  } else if (i == '9') {
    channel(nine);
  } else if (i == '0') {
    channel(zero);
  }
}
